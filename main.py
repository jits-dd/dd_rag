import logging
from config.settings import settings
from agents.conversation_agent import ConversationAgent
from agents.document_agent import DocumentAgent
from orchestrator.orchestrator import AgentOrchestrator
import argparse
from storage.milvus_store import MilvusStorage
from data_pipeline.loader import AdvancedDocumentLoader
from data_pipeline.processor import ConversationProcessor

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("document_processing.log"),
        logging.StreamHandler()
    ]
)

def initialize_data_pipeline():
    """Initialize data loading and processing pipeline"""
    try:
        loader = AdvancedDocumentLoader()
        processor = ConversationProcessor(settings.embed_model)

        nodes = loader.load_and_process()
        logging.info(f"Loaded {len(nodes)} document chunks")

        processed_nodes = processor.process_nodes(nodes)
        logging.info(f"Processed {len(processed_nodes)} nodes")

        return processed_nodes
    except Exception as e:
        logging.error(f"Data pipeline initialization failed: {e}")
        raise

def initialize_milvus(nodes):
    """Initialize Milvus with data loading"""
    try:
        storage = MilvusStorage()
        print(f"Vector store type: {type(storage.get_vector_store())}")
        storage.store_nodes(nodes)
        logging.info(f"Stored {len(nodes)} nodes in Milvus")
        return storage
    except Exception as e:
        logging.error(f"Milvus initialization failed: {e}")
        raise

def initialize_agents(vector_store, embed_model):
    """Initialize the specialized agents"""
    from retrieval.retriever import AdvancedConversationRetriever
    from orchestrator.query_engine import AdvancedConversationEngine

    retriever = AdvancedConversationRetriever(vector_store, embed_model)
    query_engine = AdvancedConversationEngine(retriever)

    return [
        ConversationAgent(query_engine),
        DocumentAgent(query_engine)
    ]

def display_response(response):
    """Display the response to the user"""
    print("\nResponse:")
    print(response.get("answer", "No answer provided"))

    if "sources" in response and response["sources"]:
        print("\nSources:")
        for i, source in enumerate(response["sources"], 1):
            print(f"{i}. [Score: {source.get('score', 0):.3f}]")
            print(f"   Text: {source.get('text', '')[:200]}...")
            if metadata := source.get('metadata'):
                print(f"   Metadata: {metadata}")
    elif "agent" in response:
        print(f"\n(Generated by {response['agent']})")

def main():
    """Main application entry point"""
    parser = argparse.ArgumentParser(description="Multi-Agent RAG System")
    parser.add_argument("--debug", action="store_true", help="Enable debug logging")
    args = parser.parse_args()

    logging.basicConfig(
        level=logging.DEBUG if args.debug else logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )

    try:
        # Initialize components
        # nodes = initialize_data_pipeline()
        # storage = initialize_milvus(nodes)
        storage = MilvusStorage()
        agents = initialize_agents(storage.get_vector_store(), settings.embed_model)

        print(f"Agents  - ----------{agents}")

        # Create orchestrator
        orchestrator = AgentOrchestrator(agents)

        print(f"orchestrator  - ----------{orchestrator}")

        # Start interaction loop
        print("\nMulti-Agent RAG System Ready. Type 'exit' to quit.\n")
        while True:
            try:
                query = input("\nQuestion: ").strip()
                if query.lower() in ('exit', 'quit'):
                    break
                if not query:
                    continue

                response = orchestrator.orchestrate_task(query)
                display_response(response)



            except KeyboardInterrupt:
                print("\nOperation cancelled by user.")
                break
            except Exception as e:
                logging.error(f"Error processing query: {e}")
                print("\nSorry, I encountered an error. Please try again.")

    except Exception as e:
        logging.critical(f"System initialization failed: {e}")
        print("\nSystem failed to initialize. Please check logs.")

if __name__ == "__main__":
    main()